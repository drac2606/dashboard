import{A as C,S as g}from"./loadSts-D_SD9hzl.js";import{c as D,d as L,f as k,g as P,C as _,E as F,h as K,I as $,e as q,M as H,P as U,R as M,b as N,a as z}from"./loadSts-D_SD9hzl.js";import{s as c}from"./index-CQdjVVlM.js";import{a as B,C as G}from"./index-CQdjVVlM.js";import"./index-CzznhK2Q.js";const l="us-east-1",A=e=>{if(typeof e?.Arn=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},E=async(e,t,s)=>{const o=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return s?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${o} (provider)`,`${n} (parent client)`,`${l} (STS default)`),o??n??l},R=(e,t)=>{let s;return async o=>{if(!s){const{logger:u=e?.parentClientConfig?.logger,region:m,requestHandler:a=e?.parentClientConfig?.requestHandler,credentialProviderLogger:S}=e,f=await E(m,e?.parentClientConfig?.region,S),p=!I(a);s=new t({profile:e?.parentClientConfig?.profile,region:f,requestHandler:p?a:void 0,logger:u})}const{Credentials:n,AssumedRoleUser:d}=await s.send(new C(o));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${o.RoleArn}`);const i=A(d),r={accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...i&&{accountId:i}};return i&&c(r,"RESOLVED_ACCOUNT_ID","T"),c(r,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),r}},I=e=>e?.metadata?.handlerProtocol==="h2",y=(e,t)=>t?class extends e{constructor(o){super(o);for(const n of t)this.middlewareStack.use(n)}}:e,v=(e={},t)=>R(e,y(g,t));export{B as $Command,D as AssumeRoleCommand,L as AssumeRoleResponseFilterSensitiveLog,C as AssumeRoleWithWebIdentityCommand,k as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,P as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,_ as CredentialsFilterSensitiveLog,F as ExpiredTokenException,K as IDPCommunicationErrorException,$ as IDPRejectedClaimException,q as InvalidIdentityTokenException,H as MalformedPolicyDocumentException,U as PackedPolicyTooLargeException,M as RegionDisabledException,N as STS,g as STSClient,z as STSServiceException,G as __Client,v as getDefaultRoleAssumerWithWebIdentity};
